import React from "react";
import { useSVG } from "hooks/useD3";
import { ChartDataItem, ChartDataProps } from "./index";

interface NumericChartData {
  class: string;
  genders: string[];
}

const toNumericChartData = (
  data: ChartDataItem[],
  scale: number = 0.1
): NumericChartData[] =>
  data.map((item) => ({
    class: item.class,
    genders: Array(Math.round(item.count.female * scale))
      .fill("female")
      .concat(Array(Math.round(item.count.male * scale)).fill("male")),
  }));

const NumericChart = (props: ChartDataProps) => {
  const svgRef = useSVG(
    (svg) => {
      const breakLine = 30;

      const numericChartData = toNumericChartData(props.data, 0.1);

      const getYOffset = (classItem: NumericChartData, index: number) =>
        (numericChartData.indexOf(classItem) +
          numericChartData
            .filter((chartData, numericIndex) => numericIndex < index)
            .reduce(
              (prev, classItem) =>
                prev + Math.floor(classItem.genders.length / breakLine) || 0,
              0
            )) *
          35 +
        30;

      // add classes
      svg
        .append("g")
        .attr("class", "plot-area")
        .selectAll(".bar")
        .data(numericChartData)
        .join((enter) => {
          const g = enter.append("g");

          g.append("text")
            .text((classItem) => classItem.class)
            .attr("x", 0)
            .attr("y", getYOffset)
            .attr("font-size", 15)
            .attr("fill", "#808080");

          g.append("g")
            .attr("class", "numeric")
            .attr(
              "transform",
              (classItem, index) =>
                `translate(0, ${getYOffset(classItem, index)})`
            )
            .selectAll(".numeric-item")
            .data((classItem) =>
              classItem.genders.map(
                (gender) => [gender, classItem.class] as const
              )
            )
            .join((subEnter) => {
              const subG = subEnter.append("g");

              subG
                .append("g")
                .attr("class", "people-container")
                .attr(
                  "transform",
                  (numericItem, index) =>
                    `translate(${(index % breakLine) * 14 + 70 || 0}, ${
                      Math.floor(index / breakLine) * 35 - 25
                    }) scale(0.35, 0.35)`
                );

              subG
                .select(".people-container")
                .append("path")
                .attr("d", (d) =>
                  d[0] === "male"
                    ? "m22.82044,6.91889c-4.29466,1.45735 -6.04864,6.44844 -3.59823,10.26592c0.86409,1.35417 2.59227,2.57938 4.16569,2.94049c0.8254,0.19345 2.39882,0.19345 3.22422,0c1.62501,-0.37401 3.26291,-1.54762 4.21728,-3.01787c1.35417,-2.10219 1.40576,-4.9782 0.12897,-7.17067c-1.58632,-2.73414 -5.12006,-4.04962 -8.13793,-3.01787l0,0z"
                    : "m23.18599,6.90138c-2.0713,0.61753 -3.70518,2.13563 -4.51569,4.21979c-0.2959,0.75905 -0.34736,1.08068 -0.34736,2.30287c-0.01287,1.05495 0.05146,1.59529 0.23157,2.12276c0.77191,2.27714 2.56018,3.98822 4.77299,4.56715c0.96489,0.24444 2.6245,0.24444 3.57653,0c3.39642,-0.8877 5.57064,-4.28412 4.97884,-7.77059c-0.39882,-2.39293 -2.14849,-4.47709 -4.4385,-5.31333c-1.06781,-0.38596 -3.16484,-0.45028 -4.25839,-0.12865l0.00001,0z"
                )
                .attr("fill", (d) => props.colorMap(d[1], d[0]));

              subG
                .select(".people-container")
                .append("path")
                .attr("d", (d) =>
                  d[0] === "male"
                    ? "m13.23805,22.78206c-1.57342,0.37401 -2.66965,1.26389 -3.36609,2.73414l-0.4127,0.86409l-0.03869,13.47724c-0.03869,14.79272 -0.07738,14.03181 0.72223,14.98618c0.73512,0.86409 2.17957,1.13493 3.25001,0.58036c0.45139,-0.21925 0.65774,-0.43849 0.90278,-0.92857l0.32242,-0.64484l0.03869,-11.90382l0.03869,-11.89092l1.08334,0l1.09624,0l0,30.16581c0,29.04378 0.0129,30.1916 0.24504,30.93962c0.50298,1.61211 1.43155,2.28275 3.17263,2.26985c1.54762,0 2.42461,-0.55457 3.05656,-1.92164l0.29663,-0.64484l0.03869,-17.83639l0.02579,-17.82349l1.28969,0l1.28969,0l0.02579,17.82349c0.03869,20.06755 -0.03869,18.50703 1.01885,19.56457c0.65774,0.65774 1.2252,0.85119 2.43751,0.8383c1.14782,0 1.80556,-0.28373 2.4762,-1.07044c0.87699,-1.01885 0.8125,1.54762 0.85119,-31.90688l0.02579,-30.39795l1.09624,0l1.08334,0l0.03869,11.89092l0.03869,11.90382l0.32242,0.64484c0.24504,0.49008 0.45139,0.70933 0.90278,0.92857c1.07044,0.55457 2.51489,0.28373 3.25001,-0.58036c0.79961,-0.95437 0.76092,-0.19345 0.72223,-14.98618l-0.03869,-13.47724l-0.4127,-0.86409c-0.70933,-1.49604 -1.79267,-2.36013 -3.41767,-2.74704c-1.16072,-0.27083 -22.3374,-0.27083 -23.47232,0.0129l0,0l0.00001,-0.00001z"
                    : "m17.21653,22.76418c-1.05495,0.18011 -2.45726,0.91343 -3.08765,1.62102c-1.145,1.31225 -1.08068,1.02922 -3.28063,13.9073c-1.09354,6.44547 -1.99411,11.93892 -1.99411,12.20909c0,0.8491 0.2573,1.49236 0.82337,2.04557c1.2222,1.23506 3.24203,1.02922 3.93676,-0.38596c0.19298,-0.41169 0.75905,-3.42215 2.04557,-10.97403l1.76253,-10.39509l1.00349,-0.0386l1.00349,-0.0386l-0.07719,0.36023c-0.15438,0.72045 -5.99519,34.19574 -5.99519,34.35012c0,0.12865 0.46315,0.16725 1.86546,0.16725l1.86546,0l0,12.45353c0,13.79151 -0.02573,13.25117 0.83624,14.26752c0.60467,0.70759 1.38944,1.00349 2.58591,0.99062c1.15787,-0.01287 1.98124,-0.38596 2.50872,-1.11927c0.78478,-1.08068 0.75905,-0.6304 0.75905,-14.2032l0,-12.3892l1.35085,0l1.35085,0l0,12.46639c0,13.84297 -0.0386,13.23831 0.86197,14.28039c0.57893,0.68186 1.38944,0.97776 2.56018,0.96489c1.15787,-0.01287 1.98124,-0.38596 2.50872,-1.11927c0.78478,-1.08068 0.75905,-0.6304 0.75905,-14.2032l0,-12.3892l1.86546,0c1.06781,0 1.86546,-0.05146 1.86546,-0.11579c0,-0.06433 -1.36371,-7.89924 -3.02333,-17.39377c-1.65961,-9.50739 -3.02333,-17.30371 -3.02333,-17.32944c0,-0.01287 0.38596,-0.02573 0.86197,0l0.86197,0.0386l1.7754,10.42082c1.96838,11.5401 1.90405,11.32139 2.93327,11.87459c0.47601,0.2573 0.70759,0.2959 1.31225,0.24444c1.56956,-0.14152 2.54731,-1.23506 2.54731,-2.85608c0,-0.28303 -0.90056,-5.78935 -1.99411,-12.22195c-1.78826,-10.49801 -2.0327,-11.78454 -2.38006,-12.47926c-0.70759,-1.45377 -1.59529,-2.25141 -3.10052,-2.79175c-0.82337,-0.2959 -0.83624,-0.2959 -8.2852,-0.32163c-4.104,0 -7.78345,0.0386 -8.16941,0.10292l-0.00003,0z"
                )
                .attr("fill", (d) => props.colorMap(d[1], d[0]));
              return subG;
            });

          return g;
        });
    },
    [props.data]
  );

  return (
    <svg
      ref={svgRef}
      style={{
        width: "100%",
        height: "100%",
        marginRight: "10px",
        marginLeft: "10px",
      }}
    />
  );
};

export default NumericChart;
